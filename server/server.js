const express = require("express");
const cors = require("cors");
const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let stands = {
  frontend: [
    {
      id: 1,
      name: "Frontend Stand 1",
      status: "free",
      occupiedBy: null,
      occupiedAt: null,
    },
    {
      id: 2,
      name: "Frontend Stand 2",
      status: "free",
      occupiedBy: null,
      occupiedAt: null,
    },
    {
      id: 3,
      name: "Frontend Stand 3",
      status: "free",
      occupiedBy: null,
      occupiedAt: null,
    },
  ],
  backend: [
    {
      id: 4,
      name: "Backend Stand 1",
      status: "free",
      occupiedBy: null,
      occupiedAt: null,
    },
    {
      id: 5,
      name: "Backend Stand 2",
      status: "free",
      occupiedBy: null,
      occupiedAt: null,
    },
    {
      id: 6,
      name: "Backend Stand 3",
      status: "free",
      occupiedBy: null,
      occupiedAt: null,
    },
  ],
};

let lastReset = Date.now();

// Middleware
app.use(cors());
app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Å—Ç–µ–Ω–¥–æ–≤
 */
function resetAllStands() {
  Object.values(stands).forEach((group) => {
    group.forEach((stand) => {
      stand.status = "free";
      stand.occupiedBy = null;
      stand.occupiedAt = null;
    });
  });
  lastReset = Date.now();
  console.log("–í—Å–µ —Å—Ç–µ–Ω–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ø–æ–ª–Ω–æ—á—å");
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞
 */
function checkAutoReset() {
  const now = new Date();
  const lastResetDate = new Date(lastReset);

  // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ –∏–ª–∏ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å 00:00
  if (
    now.getDate() !== lastResetDate.getDate() ||
    (now.getHours() === 0 && now.getMinutes() === 0)
  ) {
    resetAllStands();
  }
}

// API Routes

/**
 * GET /api/stands - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–µ–Ω–¥—ã
 */
app.get("/api/stands", (req, res) => {
  checkAutoReset(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞
  res.json({
    stands,
    lastReset,
    timestamp: Date.now(),
  });
});

/**
 * POST /api/stands - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–µ–Ω–¥—ã
 * Body: { stands: {...} }
 */
app.post("/api/stands", (req, res) => {
  try {
    if (!req.body.stands) {
      return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–Ω–¥–æ–≤" });
    }

    stands = req.body.stands;
    console.log("–°—Ç–µ–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", JSON.stringify(stands, null, 2));

    res.json({
      stands,
      lastReset,
      timestamp: Date.now(),
      message: "–°—Ç–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–µ–Ω–¥–æ–≤:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * POST /api/reset - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç–µ–Ω–¥–æ–≤
 */
app.post("/api/reset", (req, res) => {
  try {
    resetAllStands();
    console.log("–í—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–µ–Ω–¥–æ–≤");

    res.json({
      stands,
      lastReset,
      timestamp: Date.now(),
      message: "–í—Å–µ —Å—Ç–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–µ–Ω–¥–æ–≤:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/**
 * GET /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
 */
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: Date.now(),
    uptime: process.uptime(),
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use("*", (req, res) => {
  res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error("–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(checkAutoReset, 60000);

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìù API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
  console.log(`‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å—Ç–µ–Ω–¥–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
});
